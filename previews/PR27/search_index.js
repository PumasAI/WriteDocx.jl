var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"note: Note\nPositional arguments are only considered part of the API where they are explicitly mentioned in the docstrings. Otherwise, the API is built on keyword arguments so that missing options and properties can be added in the future without breaking existing code.","category":"page"},{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [WriteDocx]\nOrder   = [:type]\nFilter = t -> !(t <: WriteDocx.Length)","category":"page"},{"location":"api/#WriteDocx.AutomaticDefault","page":"API","title":"WriteDocx.AutomaticDefault","text":"AutomaticDefault{T}\n\nSignals that either a value of type T is accepted or automatic, for which the viewer application chooses appropriate behavior.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.Body","page":"API","title":"WriteDocx.Body","text":"Body(sections::Vector{Section})\n\nThe document body which contains the sections of the document.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.ComplexField","page":"API","title":"WriteDocx.ComplexField","text":"ComplexField(instruction::String; dirty = true)\n\nCreates a complex field with a specific instruction that has an effect in the viewer application. If dirty === true, the field will be reevaluated when opening the docx file.\n\nThe ComplexField element must be paired with a following ComplexFieldEnd. For some purposes, other elements may appear between the two.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.ComplexFieldEnd","page":"API","title":"WriteDocx.ComplexFieldEnd","text":"ComplexFieldEnd()\n\nEvery ComplexField element must be paired with this element.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.DocDefaults","page":"API","title":"WriteDocx.DocDefaults","text":"DocDefaults(; kwargs...)\n\nHolds the default run and paragraph properties for a Document. All properties are optional.\n\nKeyword arguments\n\nKeyword Description\nrun::RunProperties The default properties for every Run.\nparagraph::ParagraphProperties The default properties for every Paragraph.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.Document-Tuple{WriteDocx.Body}","page":"API","title":"WriteDocx.Document","text":"Document(body::Body; styles::Styles = Styles([]))\n\nThe root object containing all other elements that make up the document.\n\n\n\n\n\n","category":"method"},{"location":"api/#WriteDocx.Fonts","page":"API","title":"WriteDocx.Fonts","text":"Fonts(; [ascii::String, high_ansi::String, complex::String, east_asia::String])\nFonts(font; kwargs...)\n\nSpecifies fonts to use for four different Unicode character ranges. The convenience constructor with one positional argument changes the font for ascii and high_ansi, which should usually be the same.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.Footer","page":"API","title":"WriteDocx.Footer","text":"Footer(children::AbstractVector)\n\nContains elements for use in a Section's footer section. Each element should satisfy is_block_element.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.Footers","page":"API","title":"WriteDocx.Footers","text":"Footers(; default::Footer, [first::Footer, even::Footer])\n\nHolds information about the Footers of a Section. A default Footer must always be specified. If first is set, the first page of the section gets this separate footer. If even is set, every even-numbered page of the section gets this separate footer, making default effectively mean odd.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.Header","page":"API","title":"WriteDocx.Header","text":"Header(children::AbstractVector)\n\nContains elements for use in a Section's header section. Each element should satisfy is_block_element.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.Headers","page":"API","title":"WriteDocx.Headers","text":"Headers(; default::Header, [first::Header, even::Header])\n\nHolds information about the Headers of a Section. A default Header must always be specified. If first is set, the first page of the section gets this separate header. If even is set, every even-numbered page of the section gets this separate header, making default effectively mean odd.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.HexColor","page":"API","title":"WriteDocx.HexColor","text":"HexColor(s::String)\n\nA color in hexadecimal RGB format, for example \"FF0000\" for red or \"333333\" for a dark gray.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.InlineDrawing","page":"API","title":"WriteDocx.InlineDrawing","text":"InlineDrawing{T}(; image::T, width::EMU, height::EMU)\n\nCreate an InlineDrawing object which, as the name implies, can be placed inline with text inside Runs.\n\nWriteDocx supports different types T for the image argument. If T is a String, image is treated as the file path to a .png or .svg image. You can also use SVGWithPNGFallback to place .svg images with better fallback behavior.\n\nWidth and height of the placed image are set via width and height, note that you have to determine these values yourself for any image you place, a correct aspect ratio will not be determined automatically.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.PageSize-Tuple{Any, Any}","page":"API","title":"WriteDocx.PageSize","text":"PageSize(width, height)\n\nThe size of a page. If width > height, the page is set to PageOrientation.landscape.\n\n\n\n\n\n","category":"method"},{"location":"api/#WriteDocx.Paragraph","page":"API","title":"WriteDocx.Paragraph","text":"Paragraph(children::Vector{Any}, properties::ParagraphProperties)\nParagraph(children::AbstractVector; kwargs...)\n\nA paragraph can contain children that satisfy is_run_element. The second convenience constructor forwards all keyword arguments to ParagraphProperties.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.ParagraphBorder","page":"API","title":"WriteDocx.ParagraphBorder","text":"ParagraphBorder(; kwargs...)\n\nHolds properties for one border of a table cell and is used by ParagraphBorders. All properties are optional.\n\nKeyword arguments\n\nKeyword Description\ncolor::AutomaticDefault{[HexColor]@ref} The color of the border.\nshadow::Bool Applies a shadow effect if true.\nspace::Point The spacing between border and content.\nsize::EighthPoint The thickness of the border line.\nstyle::BorderStyle.T The line style of the border.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.ParagraphBorders","page":"API","title":"WriteDocx.ParagraphBorders","text":"ParagraphBorders(; kwargs...)\n\nHolds properties for the borders of a Paragraph and is used by ParagraphProperties. All properties are optional.\n\nKeyword arguments\n\nKeyword Description\ntop::ParagraphBorder The properties of the top border.\nbottom::ParagraphBorder The properties of the bottom border.\nleft::ParagraphBorder The properties of the left border.\nright::ParagraphBorder The properties of the right border.\nbetween::ParagraphBorder The properties of horizontal border that lies between adjacent paragraphs.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.ParagraphProperties","page":"API","title":"WriteDocx.ParagraphProperties","text":"ParagraphProperties(; kwargs...)\n\nHolds properties for a Paragraph. All properties are optional.\n\nKeyword arguments\n\nKeyword Description\nstyle::String The name of the style applied to this Paragraph.\njustification::Justification.T The justification of the paragraph.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.Run","page":"API","title":"WriteDocx.Run","text":"Run(children::AbstractVector, properties::RunProperties)\nRun(children::AbstractVector; kwargs...)\n\nCreate a Run with children who all have to satisfy is_inline_element.\n\nThe second convenience constructor forwards all keyword arguments to the RunProperties constructor.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.RunProperties","page":"API","title":"WriteDocx.RunProperties","text":"RunProperties(; kwargs...)\n\nHolds properties for a Run. All properties are optional.\n\nKeyword arguments\n\nKeyword Description\nstyle::String The name of the style applied to this Run.\ncolor::AutomaticDefault{HexColor} The color of the text.\nsize::HalfPoint The font size.\nvalign::VerticalAlignment.T Whether text is shown with baseline, superscript or subscript style.\nfonts::Fonts The font settings for this text.\nbold::Bool Whether text should be bold. Note that this works like a toggle when nested, turning boldness off again the second time it's true.\nitalic::Bool Whether text should be italic. Note that this works like a toggle when nested, turning italic style off again the second time it's true.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.SVGWithPNGFallback","page":"API","title":"WriteDocx.SVGWithPNGFallback","text":"SVGWithPNGFallback(; svg::String, png::String)\n\nCreate a SVGWithPNGFallback for the svg file at path svg and the fallback png file at path png.\n\nWord Online and other services like Slack preview don't work when a simple svg file is added via InlineDrawing{String}. SVGWithPNGFallback supplies a fallback png file which will be used for display in those situations. Note that it is your responsibility to check whether the png file is an accurate replacement for the svg.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.Section","page":"API","title":"WriteDocx.Section","text":"Section(children::AbstractVector, properties::SectionProperties)\nSection(children::AbstractVector; kwargs...)\n\nA section of a document contains a vector of children which should satisfy is_block_element. The docx format does not have a concept of individual pages, although Section might be thought of as a group of related \"page\"s.\n\nThe content within a document's Sections is laid out into actual pages dynamically in the viewer application. A Section has SectionProperties which then control how those pages are rendered.\n\nThe second convenience constructor forwards all keyword arguments to the SectionProperties constructor.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.SectionProperties","page":"API","title":"WriteDocx.SectionProperties","text":"SectionProperties(; kwargs...)\n\nHolds properties for a Section.\n\nKeyword arguments\n\nKeyword Description\npagesize::PageSize The size of each page in the section.\nvalign::PageVerticalAlign.T The vertical alignment of content on each page of the section.\nheaders::Headers Defines the header content shown at the top of each page of the section.\nfooters::Footers Defines the footer content shown at the bottom of each page of the section.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.Styles","page":"API","title":"WriteDocx.Styles","text":"Styles(styles::Vector{Style}, doc_defaults::DocDefaults)\nStyles(styles; kwargs...)\n\nHolds style information for a Document. The second convenience constructor forwards all keyword arguments to DocDefaults.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.Table","page":"API","title":"WriteDocx.Table","text":"Table(rows::Vector{TableRow}, properties::TableProperties)\nTable(rows; kwargs...)\n\nA table which can hold a vector of TableRows. The second convenience constructor forwards all keyword arguments to TableProperties.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.TableCell","page":"API","title":"WriteDocx.TableCell","text":"TableCell(children::Vector{Any}, properties::TableCellProperties)\nTableCell(children::AbstractVector; kwargs...)\n\nOne cell of a Table which can hold elements that satisfy is_block_element. The second convenience constructor forwards all keyword arguments to TableCellProperties.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.TableCellBorder","page":"API","title":"WriteDocx.TableCellBorder","text":"TableCellBorder(; kwargs...)\n\nHolds properties for one border of a table cell and is used by TableCellBorders. All properties are optional.\n\nKeyword arguments\n\nKeyword Description\ncolor::AutomaticDefault{[HexColor]@ref} The color of the border.\nshadow::Bool Applies a shadow effect if true.\nspace::Point The spacing between border and content.\nsize::EighthPoint The thickness of the border line.\nstyle::BorderStyle.T The line style of the border.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.TableCellBorders","page":"API","title":"WriteDocx.TableCellBorders","text":"TableCellBorders(; kwargs...)\n\nHolds properties for the borders of a TableCell and is used by TableCellProperties. All properties are optional.\n\nKeyword arguments\n\nKeyword Description\ntop::TableCellBorder The properties of the top border.\nbottom::TableCellBorder The properties of the bottom border.\nstart::TableCellBorder The properties of the left border in left-to-right text.\nstop::TableCellBorder The properties of the right border in left-to-right text.\ninside_h::TableCellBorder The properties of the horizontal border that lies between adjacent cells.\ninside_v::TableCellBorder The properties of the vertical border that lies between adjacent cells.\ntl2br::TableCellBorder The properties of the diagonal border going from the top left to the bottom right corner.\ntr2bl::TableCellBorder The properties of the diagonal border going from the top right to the bottom left corner.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.TableCellMargins","page":"API","title":"WriteDocx.TableCellMargins","text":"TableCellMargins(; kwargs...)\n\nHolds properties for the margins of a TableCell and is used by TableCellProperties. All properties are optional.\n\nKeyword arguments\n\nKeyword Description\ntop::Twip The top margin.\nbottom::Twip The bottom margin.\nstart::Twip The left margin in left-to-right text.\nstop::Twip The right margin in left-to-right text.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.TableCellProperties","page":"API","title":"WriteDocx.TableCellProperties","text":"TableCellProperties(; kwargs...)\n\nHolds properties for a TableCell. All properties are optional.\n\nKeyword arguments\n\nKeyword Description\nborders::TableCellBorders The border style of the cell.\nvertical_merge::Bool Should be set to true if this cell should be merged with the one above it.\ngridspan::Int The number of cells this cell should span in horizontal direction.\nmargins::TableCellMargins The margins of the cell.\nvalign::VerticalAlign.T The vertical alignment of the content in the cell.\nhide_mark::Bool If true, hides the editor mark so that the table cell can fully collapse if it's empty.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.TableLevelCellMargins","page":"API","title":"WriteDocx.TableLevelCellMargins","text":"TableCellMargins(; kwargs...)\n\nHolds properties for the default margins of all TableCells in a Table and is used by TableProperties. All properties are optional.\n\nKeyword arguments\n\nKeyword Description\ntop::Twip The top margin.\nbottom::Twip The bottom margin.\nstart::Twip The left margin in left-to-right text.\nstop::Twip The right margin in left-to-right text.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.TableProperties","page":"API","title":"WriteDocx.TableProperties","text":"TableProperties(; kwargs...)\n\nHolds properties for a Table. All properties are optional.\n\nKeyword arguments\n\nKeyword Description\nmargins::TableLevelCellMargins Margins for all cells in the table.\nspacing::Twip The space between adjacent cells and the edges of the table.\njustification::Justification.T The justification of the table.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.TableRow","page":"API","title":"WriteDocx.TableRow","text":"TableRow(cells::Vector{TableCell}, properties::TableRowProperties)\nTableRow(cells; kwargs...)\n\nOne row of a Table which can hold a vector of TableCells. The second convenience constructor forwards all keyword arguments to TableRowProperties.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.TableRowProperties","page":"API","title":"WriteDocx.TableRowProperties","text":"TableRowProperties(; kwargs...)\n\nHolds properties for a TableRow. All properties are optional.\n\nKeyword arguments\n\nKeyword Description\nheader::Bool Whether this row should be part of the header section which is repeated after every page break.\nheight::TableRowHeight The height of the table row.\n\n\n\n\n\n","category":"type"},{"location":"api/#Lengths","page":"API","title":"Lengths","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [WriteDocx]\nOrder   = [:type]\nFilter = t -> t <: WriteDocx.Length","category":"page"},{"location":"api/#WriteDocx.Centimeter","page":"API","title":"WriteDocx.Centimeter","text":"Centimeter(value::Float64) <: Length\n\nA length of one centimeter, or 1/2.54 of an inch. For convenience, the constants cm and mm are provided for Centimeter(1) and Centimeter(0.1), respectively.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.EMU","page":"API","title":"WriteDocx.EMU","text":"EMU(value::Float64) <: Length\n\nA length of one English metric unit, or 1/914400 of an inch. For convenience, the constant emu is provided for EMU(1).\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.EighthPoint","page":"API","title":"WriteDocx.EighthPoint","text":"EighthPoint(value::Float64) <: Length\n\nA length of one eight of a typographic point, or 1/576 of an inch. For convenience, the constant eighthpt is provided for EighthPoint(1).\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.HalfPoint","page":"API","title":"WriteDocx.HalfPoint","text":"HalfPoint(value::Float64) <: Length\n\nA length of a half typographic point, or 1/144 of an inch. For convenience, the constant halfpt is provided for HalfPoint(1).\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.Inch","page":"API","title":"WriteDocx.Inch","text":"Inch(value::Float64) <: Length\n\nA length of one inch. For convenience, the constant inch is provided for Inch(1).\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.Length","page":"API","title":"WriteDocx.Length","text":"Length\n\nThe supertype for all length metrics that WriteDocx can handle. Each Length can be converted to any other Length and can therefore be passed to any struct that stores a specific length type.\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.Point","page":"API","title":"WriteDocx.Point","text":"Point(value::Float64) <: Length\n\nA length of one typographic point, or 1/72 of an inch. For convenience, the constant pt is provided for Point(1).\n\n\n\n\n\n","category":"type"},{"location":"api/#WriteDocx.Twip","page":"API","title":"WriteDocx.Twip","text":"Twip(value::Float64) <: Length\n\nA length of one twip, or twentieth of a point, or 1/1440 of an inch. For convenience, the constant twip is provided for Twip(1).\n\n\n\n\n\n","category":"type"},{"location":"api/#Enums","page":"API","title":"Enums","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"WriteDocx.BorderStyle\nWriteDocx.Justification\nWriteDocx.UnderlinePattern\nWriteDocx.ShadingPattern\nWriteDocx.VerticalAlign\nWriteDocx.VerticalAlignment","category":"page"},{"location":"api/#WriteDocx.BorderStyle","page":"API","title":"WriteDocx.BorderStyle","text":"BorderStyle\n\nAn enum that can be either single, dash_dot_stroked, dashed, dash_small_gap, dot_dash, dot_dot_dash, dotted, double, double_wave, inset, nil, none, outset, thick, thick_thin_large_gap, thick_thin_medium_gap, thick_thin_small_gap, thin_thick_large_gap, thin_thick_medium_gap, thin_thick_small_gap, thin_thick_thin_large_gap, thin_thick_thin_medium_gap, thin_thick_thin_small_gap, three_d_emboss, three_d_engrave, triple or wave\n\n\n\n\n\n","category":"module"},{"location":"api/#WriteDocx.Justification","page":"API","title":"WriteDocx.Justification","text":"Justification\n\nAn enum that can be either start, stop, center, both or distribute.\n\n\n\n\n\n","category":"module"},{"location":"api/#WriteDocx.UnderlinePattern","page":"API","title":"WriteDocx.UnderlinePattern","text":"UnderlinePattern\n\nAn enum that can be either dash, dash_dot_dot_heavy, dash_dot_heavy, dashed_heavy, dash_long, dash_long_heavy, dot_dash, dot_dot_dash, dotted, dotted_heavy, double, none, single, thick, wave, wavy_double, wavy_heavy or words.\n\n\n\n\n\n","category":"module"},{"location":"api/#WriteDocx.ShadingPattern","page":"API","title":"WriteDocx.ShadingPattern","text":"ShadingPattern\n\nAn enum that can be either clear, diag_cross, diag_stripe, horz_cross, horz_stripe, nil, thin_diag_cross, or solid.\n\n\n\n\n\n","category":"module"},{"location":"api/#WriteDocx.VerticalAlign","page":"API","title":"WriteDocx.VerticalAlign","text":"VerticalAlign\n\nAn enum that can be bottom, center or top.\n\n\n\n\n\n","category":"module"},{"location":"api/#WriteDocx.VerticalAlignment","page":"API","title":"WriteDocx.VerticalAlignment","text":"VerticalAlignment\n\nAn enum that can be either baseline, subscript or superscript.\n\n\n\n\n\n","category":"module"},{"location":"examples/drawings/#Drawings","page":"Drawings","title":"Drawings","text":"","category":"section"},{"location":"examples/drawings/","page":"Drawings","title":"Drawings","text":"CurrentModule = WriteDocx","category":"page"},{"location":"examples/drawings/","page":"Drawings","title":"Drawings","text":"Png and svg images can be included inline with text using the InlineDrawing object.","category":"page"},{"location":"examples/drawings/","page":"Drawings","title":"Drawings","text":"import WriteDocx as W\n\ndoc = W.Document(\n    W.Body([\n        W.Section([\n            W.Paragraph([\n                W.Run([\n                    W.Text(\"Here's a little inline drawing: \"),\n                    W.InlineDrawing(\n                        image = \"./../assets/icon_docx.png\",\n                        width = 30 * W.pt,\n                        height = 30 * W.pt,\n                    ),\n                ]),\n            ]),\n        ]),\n    ]),\n)\n\nW.save(\"inline_drawing.docx\", doc)","category":"page"},{"location":"examples/drawings/","page":"Drawings","title":"Drawings","text":"Download inline_drawing.docx:","category":"page"},{"location":"examples/drawings/","page":"Drawings","title":"Drawings","text":"<a href=\"../inline_drawing.docx\"><img src=\"./../../assets/icon_docx.png\" width=\"60\">","category":"page"},{"location":"#WriteDocx","page":"Home","title":"WriteDocx","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"WriteDocx is a utility package that lets you create .docx files compliant with ECMA-376, for use with Microsoft Office Word and other compatible software. Under the hood, these files are zip files containing a standardized folder structure with XML files and other assets.","category":"page"},{"location":"","page":"Home","title":"Home","text":"WriteDocx contains many Julia types that mirror the types of XML nodes commonly found in docx files, without the user having to write any XML manually.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThe types of WriteDocx.jl do not exhaustively cover the vast ECMA-376 spec. Instead, we have implemented the parts most useful to us and will consider extending this set more and more when there's a specific need.","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here's a simple document with two paragraphs, one of which has pink-colored text:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import WriteDocx as W\n\ndoc = W.Document(\n    W.Body([\n        W.Section([\n            W.Paragraph([\n                W.Run([W.Text(\"Hello world, from WriteDocx.jl\")]),\n            ]),\n            W.Paragraph([\n                W.Run(\n                    [W.Text(\"Goodbye!\")],\n                    color = W.HexColor(\"FF00FF\"),\n                ),\n            ]),\n        ]),\n    ]),\n)\n\nW.save(\"example.docx\", doc)\nnothing # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"Download example.docx:","category":"page"},{"location":"","page":"Home","title":"Home","text":"<a href=\"example.docx\"><img src=\"./assets/icon_docx.png\" width=\"60\">","category":"page"},{"location":"examples/headers_and_footers/#Headers-and-Footers","page":"Headers & Footers","title":"Headers & Footers","text":"","category":"section"},{"location":"examples/headers_and_footers/","page":"Headers & Footers","title":"Headers & Footers","text":"CurrentModule = WriteDocx","category":"page"},{"location":"examples/headers_and_footers/","page":"Headers & Footers","title":"Headers & Footers","text":"Headers and footers are specified using the Headers and Footers objects. You can specify different styles for the first page and for every even page, but in this example we only create a default header and footer:","category":"page"},{"location":"examples/headers_and_footers/","page":"Headers & Footers","title":"Headers & Footers","text":"import WriteDocx as W\n\nheaders = W.Headers(\n    default = W.Header([\n        W.Paragraph([W.Run([W.Text(\"The header\")])]),\n    ]),\n)\n\nfooters = W.Footers(\n    default = W.Footer([\n        W.Paragraph([W.Run([W.Text(\"The footer\")])]),\n    ]),\n)\n\ndoc = W.Document(W.Body([W.Section([]; headers, footers)]))\n\nW.save(\"headers_and_footers.docx\", doc)","category":"page"},{"location":"examples/headers_and_footers/","page":"Headers & Footers","title":"Headers & Footers","text":"Download headers_and_footers.docx:","category":"page"},{"location":"examples/headers_and_footers/","page":"Headers & Footers","title":"Headers & Footers","text":"<a href=\"../headers_and_footers.docx\"><img src=\"./../../assets/icon_docx.png\" width=\"60\">","category":"page"},{"location":"examples/tables/#Tables","page":"Tables","title":"Tables","text":"","category":"section"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"CurrentModule = WriteDocx","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"A Table consists of TableRows with TableCells inside. Each cell can be styled separately, for example with borders and margins:","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"import WriteDocx as W\n\nborder() = W.TableCellBorder(\n    color = W.HexColor(\"000000\"),\n    style = W.BorderStyle.single,\n)\n\nfunction cell(string)\n    paragraph = W.Paragraph([W.Run([W.Text(string)])])\n    return W.TableCell(\n        [paragraph],\n        borders = W.TableCellBorders(\n            top = border(),\n            bottom = border(),\n            start = border(),\n            stop = border(),\n        ),\n        margins = W.TableCellMargins(\n            top = 10 * W.pt,\n            bottom = 10 * W.pt,\n            start = 10 * W.pt,\n            stop = 10 * W.pt,\n        ),\n    )\nend\n\ncells = [cell(\"$col$row\") for row = 1:8, col = 'A':'H']\n\nrows = [W.TableRow(row) for row in eachrow(cells)]\n\ndoc = W.Document(W.Body([W.Section([W.Table(rows)])]))\n\nW.save(\"table.docx\", doc)","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"Download table.docx:","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"<a href=\"../table.docx\"><img src=\"./../../assets/icon_docx.png\" width=\"60\">","category":"page"}]
}
